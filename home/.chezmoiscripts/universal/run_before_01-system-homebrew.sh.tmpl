{{- if (ne .host.distro.family "windows") -}}
#!/usr/bin/env bash
# @file Homebrew / Xcode Tools Installation
# @brief Ensures Xcode tools are installed on macOS and ensures Homebrew is installed on either Linux or macOS
# @description
#     This script ensures macOS has tools like `git` by installing the Xcode command-line developer tools if they are
#     not already installed. Then, on both Linux and macOS, it ensures Homebrew is installed.
#
#     ## Environment Variables
#
#     * `NO_RESTART` - Set this variable to skip restarts triggered by system updates on macOS
#
#     ## Homebrew Requirement
#
#     Install Doctor relies on Homebrew for many tools that are currently only available via Homebrew. Removing the dependency
#     would be a nice-to-have but there are currently no plans for supporting systems without Homebrew installed.

{{ includeTemplate "universal/profile-before" }}
{{ includeTemplate "universal/logg-before" }}

### Configure hostname
# Source: https://www.tecmint.com/set-hostname-permanently-in-linux/
if [ -d /Applications ] && [ -d /System ]; then
  # Source: https://apple.stackexchange.com/questions/287760/set-the-hostname-computer-name-for-macos
  logg info 'Setting macOS hostname / local hostname / computer name'
  sudo scutil --set HostName '{{ .host.hostname | replace .host.domain "" | replace "." "" }}.{{ .host.domain }}' && logg success 'Changed HostName to {{ .host.hostname | replace .host.domain "" | replace "." "" }}.{{ .host.domain }}'
  sudo scutil --set LocalHostName '{{ .host.hostname | replace .host.domain "" | replace "." "" }}' && logg success 'Changed LocalHostName to {{ .host.hostname | replace .host.domain "" | replace "." "" }}'
  sudo scutil --set ComputerName '{{ .host.hostname | replace .host.domain "" | replace "." "" }}' && logg success 'Changed ComputerName to {{ .host.hostname | replace .host.domain "" | replace "." "" }}'
  logg info 'Flushing DNS cache'
  dscacheutil -flushcache
elif [ -f /etc/passwd ]; then
  logg info 'Setting Linux hostname'
  hostname '{{ .host.hostname | replace .host.domain "" | replace "." "" }}.{{ .host.domain }}' && logg success 'Changed hostname to {{ .host.hostname | replace .host.domain "" | replace "." "" }}.{{ .host.domain }}'
  if command -v hostnamectl > /dev/null; then
    logg info 'Ensuring hostname persists after reboot'
    sudo hostnamectl set-hostname '{{ .host.hostname | replace .host.domain "" | replace "." "" }}.{{ .host.domain }}' && logg success 'Permanently changed hostname to {{ .host.hostname | replace .host.domain "" | replace "." "" }}.{{ .host.domain }}'
  else
    logg warn '`hostnamectl` was not available in the PATH - this operating system type might be unsupported'
  fi
else
  logg warn 'Could not configure hostname because system type was not detectable'
fi

### Configure Firewall
if [ -d /Applications ] && [ -d /System ]; then
  logg info 'Disabling the block all incoming traffic option in the system Firewall settings'
  /usr/libexec/ApplicationFirewall/socketfilterfw --setblockall off || (logg error 'Failed to disable incoming traffic block in the system Firewall' && logg info 'Manually disable the option under "System Preferences" > "Network" > "Firewall" > "Incoming Traffic Block Toggle"')
fi

### System upgrade on macOS
if [ -d /Applications ] && [ -d /Library ] && [ -z "$NO_RESTART" ]; then
  if command -v gtimeout > /dev/null; then
    # Allow 8 minutes for system updates
    logg info 'Ensuring system software is upgraded (timing out after 8 minutes if system upgrade fails)'
    sudo gtimeout 3000 softwareupdate -i -a -R || logg warn 'The system update command timed out after 50 minutes'
  else
    # If gtimeout is unavailable, then attempt system upgrade without a timeout (which usually works on fresh systems)
    logg info 'Applying OS upgrades (if available)'
    sudo softwareupdate -i -a -R || logg error 'Failed to perform a system update via `sudo softwareupdate -i -a`'
  fi
  logg info 'If system updates were downloaded / installed, a reboot might be required.'
fi

### Ensure dependencies are installed on Linux
if ! command -v curl > /dev/null || ! command -v git > /dev/null || ! command -v expect > /dev/null || ! command -v rsync > /dev/null; then
    if command -v apt-get > /dev/null; then
        # @description Ensure `build-essential`, `curl`, `expect`, `git`, `rsync`, `procps`, and `file` are installed on Debian / Ubuntu
        sudo apt-get update
        sudo apt-get install -y build-essential curl expect git rsync procps file
    elif command -v dnf > /dev/null; then
        # @description Ensure `curl`, `expect`, `git`, `rsync`, `procps-ng`, and `file` are installed on Fedora (as well as the Development Tools package)
        sudo dnf groupinstall -y 'Development Tools'
        sudo dnf install -y curl expect git rsync procps-ng file
    elif command -v yum > /dev/null; then
        # @description Ensure `curl`, `expect`, `git`, `rsync`, `procps-ng`, and `file` are installed on CentOS (as well as the Development Tools package)
        sudo yum groupinstall -y 'Development Tools'
        sudo yum install -y curl expect git rsync procps-ng file
    elif command -v pacman > /dev/null; then
        # @description Ensure `base-devel`, `curl`, `expect`, `git`, `rsync`, `procps-ng`, and `file` are installed on Archlinux
        sudo pacman update
        sudo pacman -Sy base-devel curl expect git rsync procps-ng file
    elif command -v zypper > /dev/null; then
        # @description Ensure `curl`, `expect`, `git`, `rsync`, `procps`, and `file` are installed on OpenSUSE (as well as the devel_basis pattern)
        sudo zypper install -yt pattern devel_basis
        sudo zypper install -y curl expect git rsync procps file
    elif command -v apk > /dev/null; then
        # @description Ensure `curl`, `expect`, `git`, `rsync`, `procps`, and `file` are installed on Alpine
        apk add build-base curl expect git rsync procps file
    elif [ -d /Applications ] && [ -d /Library ]; then
        # @description Ensure CLI developer tools are available on macOS (via `xcode-select`)
        sudo xcode-select -p >/dev/null 2>&1 || xcode-select --install
    elif [[ "$OSTYPE" == 'cygwin' ]] || [[ "$OSTYPE" == 'msys' ]] || [[ "$OSTYPE" == 'win32' ]]; then
        # @description Ensure `curl`, `expect`, `git`, and `rsync` are installed on Windows
        choco install -y curl expect git rsync
    fi
fi

### Ensure Linux Homebrew is loaded
loadLinuxbrew() {
  if ! command -v brew > /dev/null; then
    if [ -d "$HOME/.linuxbrew" ]; then
      eval "$("$HOME/.linuxbrew/bin/brew" shellenv)"
    elif [ -d "/home/linuxbrew/.linuxbrew" ]; then
      eval "(/home/linuxbrew/.linuxbrew/bin/brew shellenv)"
    fi
  fi
}

### Ensures Homebrew folders have proper owners / permissions
fixHomebrewPermissions() {
  if command -v brew > /dev/null; then
    logg info 'Applying proper permissions on Homebrew folders'
    sudo chmod -R go-w "$(brew --prefix)/share"
    BREW_DIRS="share/man share/doc share/zsh/site-functions etc/bash_completion.d"
    for BREW_DIR in $BREW_DIRS; do
      if [ -d "$(brew --prefix)/$BREW_DIR" ]; then
        sudo chown -R "$(whoami)" "$(brew --prefix)/$BREW_DIR"
      fi
    done
    brew update --force --quiet
  fi
}

### Installs Homebrew
ensurePackageManagerHomebrew() {
  if ! command -v brew > /dev/null; then
    if command -v sudo > /dev/null && sudo -n true; then
      echo | bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)"
    else
      logg info 'Homebrew is not installed. Password may be required.'
      bash -c "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/HEAD/install.sh)" || BREW_EXIT_CODE="$?"
      if [ -n "$BREW_EXIT_CODE" ]; then
        logg warn 'Homebrew was installed but part of the installation failed to complete successfully.'
      fi
    fi
  fi
}

### Logic
loadLinuxbrew
ensurePackageManagerHomebrew
loadLinuxbrew
fixHomebrewPermissions

### Enable auto-update service
if brew autoupdate status | grep 'Autoupdate is not configured.' > /dev/null; then
  logg info 'Enabling Homebrew auto-update service (every 24 hours)'
  brew autoupdate start --cleanup --greedy --upgrade
fi
{{ end -}}
